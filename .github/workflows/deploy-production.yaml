name: Build, Test and Deploy Laravel App (Production)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  Build-Docker-Image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build Docker image
        run: docker build -f ./server/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/apexo:production ./server
      - name: Save Docker image
        run: docker save ${{ secrets.DOCKER_USERNAME }}/apexo:production -o apexo_production.tar
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: apexo_production_image
          path: apexo_production.tar

  Run-Laravel-Tests:
    needs: Build-Docker-Image
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: testing
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries=3
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: apexo_production_image
      - name: Load Docker image
        run: docker load -i apexo_production.tar
      - name: Run Laravel tests in Docker
        run: |
          docker run --rm \
            --network host \
            -e DB_CONNECTION=pgsql \
            -e DB_HOST=127.0.0.1 \
            -e DB_PORT=5432 \
            -e DB_DATABASE=testing \
            -e DB_USERNAME=postgres \
            -e DB_PASSWORD=password \
            ${{ secrets.DOCKER_USERNAME }}/apexo:production \
            php artisan test

  Push-Docker-Image:
    needs: Run-Laravel-Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: apexo_production_image
      - name: Load Docker image
        run: docker load -i apexo_production.tar
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/apexo:production

  Copy-docker-compose-To-EC2:
    needs: Push-Docker-Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Copy docker-compose to EC2
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.EC2_HOST_PRODUCTION }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "docker-compose.yaml"
          target: "/home/${{ secrets.EC2_USER }}/"

  Deploy-To-Server:
    needs: Push-Docker-Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: SSH into Server and Deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST_PRODUCTION }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/${{ secrets.EC2_USER }}
            sudo docker-compose down || true
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/apexo:production
            sudo docker-compose up -d --build
            # Both app and queue-worker services will be started by docker-compose
            sudo docker exec ${{ secrets.EC2_USER }}_app_1 sh -c '
              if [ ! -f .env ]; then cp .env.example .env; fi
              php artisan key:generate --force
              php artisan jwt:secret --force || true
              php artisan migrate --force
              php artisan config:clear
              php artisan cache:clear
              php artisan config:cache
            '
