user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

# Events
 events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    server {
        listen 80;
        server_name Apexo.com;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name Apexo.com;

        ssl_certificate /etc/letsencrypt/selfsigned.crt;
        ssl_certificate_key /etc/letsencrypt/selfsigned.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        location / {
            proxy_pass http://app:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

# Ensure the nginx.conf file is present and correctly mounted on EC2 for Docker Compose
# 1. On your EC2 instance, copy this nginx.conf to /home/ubuntu/nginx.conf (or the path referenced in your docker-compose.yaml)
# 2. In your docker-compose.yaml, ensure the nginx service mounts the file as:
#    - /home/ubuntu/nginx.conf:/etc/nginx/nginx.conf:ro
# 3. If the file is not present, copy it from your repo or local machine to EC2 using scp:
#    scp nginx.conf ubuntu@<EC2-IP>:/home/ubuntu/nginx.conf
# 4. Restart the nginx container after copying and mounting the file.
#
# No code change needed in nginx.conf itself, but this comment documents the fix for the backend pipeline mount error.
